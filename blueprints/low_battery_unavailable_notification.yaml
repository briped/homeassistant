blueprint:
  name: Device/entity availability notification
  description: Regularly check all entities for low battery or unavailability.
    Device must be assigned to an area to be monitored. Areas with names beginning with underscore '_' will not be monitored.
    Monitored devices with a 'battery' device-class will be checked for battery level.

    Notify if
      'state.state' is 'on' (domain binary_sensor) or 'state.state' is less than battery_threshold (domain sensor).
      'state.state' is 'unavailable'.

  domain: automation

  source_url: https://raw.githubusercontent.com/briped/homeassistant/master/blueprints/low_battery_unavailable_notification.yaml

  input:
    battery_threshold:
      name: Battery warning level threshold
      description: Battery sensors below battery_threshold are assumed to be low-battery (as
        well as binary battery sensors with value 'on').
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0
    time:
      name: Time to test on
      description: Test is run at configured time
      default: '10:00:00'
      selector:
        time: {}
    day:
      name: Weekday to test on
      description: 'Test is run at configured time either everyday (0) or on a given
        weekday (1: Monday ... 7: Sunday)'
      default: 0
      selector:
        number:
          min: 0.0
          max: 7.0
          mode: slider
          step: 1.0
    actions:
      name: Actions
      description: Notifications or similar to be run. {{sensors}} is replaced with
        the names of sensors being low on battery.
      selector:
        action: {}
variables:
  day: !input 'day'
  battery_threshold: !input 'battery_threshold'
  sensors: >-
    {% set result = namespace(entities=[]) %}
    {% set item_name = namespace(variables='') %}
    {% set battery_threshold = namespace(variables=100) %}
    {% for state in states %}
      {% if area_name(state.entity_id) != None and area_name(state.entity_id)[0:1] != '_' %}
        {% if device_attr(state.entity_id, 'name_by_user') != None %}
          {% set item_name.variables = device_attr(state.entity_id, 'name_by_user') %}
        {% elif device_attr(state.entity_id, 'name') != None %}
          {% set item_name.variables = device_attr(state.entity_id, 'name') %}
        {% else %}
          {% set item_name.variables = state.name %}
        {% endif %}
        {% if state.state == 'unavailable' %}
          {% set result.entities = result.entities + [(item_name.variables, device_id(state.entity_id), state.entity_id, state.state)] %}
        {% else %}
          {% if state_attr(state.entity_id, 'device_class') == 'battery' %}
            {% if state.domain == 'binary_sensor' and state.state == 'on' %}
              {% set result.entities = result.entities + [(item_name.variables, device_id(state.entity_id), state.entity_id, state.state)] %}
            {% elif state.domain == 'sensor' and int(state.state) < battery_threshold.variables %}
              {% set result.entities = result.entities + [(item_name.variables, device_id(state.entity_id), state.entity_id, state.state)] %}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{result.entities}}
trigger:
- platform: time
  at: !input 'time'
condition:
- '{{ sensors != '''' and (day | int == 0 or day | int == now().isoweekday()) }}'
action:
- choose: []
  default: !input 'actions'
mode: single